<?php
// $Id$



/**
* Implementation of hook_menu().
*/
function gss_menu() {
  $items = array();
  
  $items['admin/config/google-site-search'] = array(
    'title' => 'Google Site Search',
    'description' => 'Google Site Search settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gss_settings'),
    'access arguments' => array('administer site settings'),
  );
  
  $items['google-search'] = array(
    'title' => t('Search'),
    'page callback' => 'search',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['google-search/%'] = array(
    'title' => t('Search results'),
    'page callback' => 'gss_search_results',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}
/**
 * Implements hook_theme().
 */
function gss_theme($existing, $type, $theme, $path) {
  return array(
    'gss_result' => array(
      'variables' => array('result' => NULL, 'module' => NULL),
      'file' => 'gss.theme.inc',
      'template' => 'gss-result',
    ),
    'gss_results' => array(
      'variables' => array('results' => NULL, 'module' => NULL),
      'file' => 'gss.theme.inc',
      'template' => 'gss-results',
    ),
  );
}
/**
* Module settings.
*/
function gss_settings() {
  $form = array();
  
  $form['gss_api_key'] = array(
    '#title' => t('API Key'),
    '#type' => 'textfield',
    '#description' => t('Your Google Site Search API key.'),
    '#default_value' => variable_get('gss_api_key', ''),
    '#required' => TRUE,
  );
  
  $form['gss_page_size'] = array(
    '#title' => t('Page size'),
    '#type' => 'textfield',
    '#description' => t('Number of results to display per page.'),
    '#default_value' => variable_get('gss_page_size', 20),
    '#size' => 5,
    '#max_length' => 5,
  );
  $form['gss_results_tab'] = array(
    '#title' => t('Search results tab name'),
    '#type' => 'textfield',
    '#maxlength' => 50,
    '#size' => 60,
    '#description' => t('Enter a custom name of the tab where search results are displayed (defaults to %google).', array('%google' => t('Google Search'))),
    '#default_value' => variable_get('gss_results_tab', ''),
  );
  
  return system_settings_form($form);
}

/**
* Implementation of hook_block().
*/
function gss_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('Google Site Search'),
      'weight' => 0,
      'status' => 0,
    );

    return $blocks;
  }
  else if ($op == 'view') {
    $block = array(
      'subject' => t('Search'),
      'content' => drupal_get_form('gss_search_form'),
    );

    return $block;
  }
}
/**
* Search results page.
*/
function gss_search_results($query) {

  // Include dependencies.
  module_load_include('inc', 'gss', 'includes/GoogleSiteSearch');
  // Make query safe.
  $query = check_plain($query);
  // Init GoogleSiteSearch object.
  $gss = new GoogleSiteSearch($query, variable_get('gss_api_key', ''));
  // Get current page.
  $page = isset($_GET['page']) ? intval($_GET['page']) : 1;
  // Init results variable.
  $results = null;
  // Set the number of results per page.
  $gss->SetPageSize(variable_get('gss_page_size', 20));
  // Perform search.
  try {
    $results = $gss->GetSearchResults($page);
  }
  catch(Exception $e) {
     watchdog('gss', $e, NULL, WATCHDOG_ERROR);
     drupal_set_message(t('Sorry, the search function is unavailable at this time.'));
     exit();
  }
  // Get search summary.
  $total_results = $gss->GetTotalResults();
  $end_pos = $gss->GetCurrentPage() * $gss->GetPageSize();
  $start_pos = $end_pos - $gss->GetPageSize() + 1;
  
  if ($end_pos > $total_results) {
    $end_pos = $total_results;
  }
  // Build output.
  if (!empty($results)) {
    $output = array();
    // Loop results.
    foreach ($results as $result) {
      $output[] = array(
        'link' => urldecode($result['url']),
        'title' => $result['title'],
        'snippet' => $result['description'],
        );
    }
  }
  else {
    $output[] = array(
        'link' => '',
        'title' => '',
        'snippet' => t('No results'),
        );
  }
  // Build URL to the pager  
  $destination = drupal_get_destination();  
  $url_parse = drupal_parse_url($destination['destination']);
  $url_parse['query']['page'] = '';
  $link = url($url_parse['path'], $url_parse);
  // Get searrch head
  $output['head'] = $gss->GetSearchHead();
  // Get pager
  $output['pager'] = $gss->GetPager($link);
  
  return $output;
}









